name: Task Manager CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./server
    
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: taskmanager_test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: server/package-lock.json
      
      - name: Install dependencies
        run: npm ci
        
      - name: Generate Prisma client
        run: npx prisma generate
        
      - name: Run migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/taskmanager_test_db
          
      - name: Run tests
        run: npm test
        env:
          JWT_SECRET: test-jwt-secret
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/taskmanager_test_db
          NODE_ENV: test

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./client
        
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: client/package-lock.json
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests
        run: npm test
        
      - name: Build frontend
        run: npm run build
        env:
          VITE_API_URL: http://localhost:5000/api

  build-docker:
    name: Build Docker Images
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Build backend image
        uses: docker/build-push-action@v4
        with:
          context: ./server
          push: false
          tags: taskmanager-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Build frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./client
          push: false
          tags: taskmanager-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Despliegue (Pendiente de configurar)
  # deploy:
  #   name: Deploy to Production
  #   needs: build-docker
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   
  #   steps:
  #     - name: Deploy to server
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ secrets.SERVER_HOST }}
  #         username: ${{ secrets.SERVER_USER }}
  #         key: ${{ secrets.SSH_PRIVATE_KEY }}
  #         script: |
  #           cd /path/to/deployment
  #           git pull
  #           docker-compose down
  #           docker-compose up -d --build
